{"version":3,"sources":["components/MapVisualiser.js","components/Tooltip.js","utils/Dataparser.js","components/CovidTable.js","components/TabularInfo.js","utils/Notifier.js","components/MapVisualiserContainer.js","App.js","serviceWorker.js","index.js"],"names":["d3","Object","assign","require","MapVisualiser","props","state","mapData","delta","this","initMap","nextProps","setState","requestAnimationFrame","highlightChangedStates","data","animate","color","dur","id","split","join","filledColor","select","style","transition","duration","forEach","isDead","isConfirmed","isRecovered","keys","length","topoMap","states","topojson","objects","india","mapContainerWidth","document","getElementById","clientWidth","scaleValue","body","map","stateMap","features","width","height","scale","call","colors","that","render","selection","each","scaleLinear","domain","min","d","properties","confirmed","max","range","remove","svg","append","attr","projection","geoMercator","center","translate","path","geoPath","selectAll","enter","on","setTooltip","left","window","event","pageX","top","pageY","opacity","value","arguments","tooltipData","className","React","Component","Tooltip","children","parseMapData","covidData","geometries","i","stateData","getStateByName","ST_NM","CovidTable","Table","striped","bordered","hover","responsive","variant","deaths","recovered","key","createRows","TabularInfo","useState","tabularData","setTabularData","console","log","useEffect","Container","fluid","Row","Col","Tabs","onSelect","eventKey","axios","get","then","resp","Tab","title","notifyCovidUpdates","covidDelta","shift","notificationBody","text","audioPath","options","icon","Notification","permission","requestPermission","alert","notifyMe","MapVisualiserContainer","getCOVIDData","isDelta","setInterval","getCOVIDDelta","Navbar","bg","fontFamily","prepareTooltipBody","App","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55271f62.chunk.js","sourcesContent":["import React from 'react';\nimport * as topojson from \"topojson-client\";\n// import data from './../assets/ne_10m_admin_1_India_Official.json';\nimport data from './../assets/india.json';\nvar d3 = Object.assign({}, require(\"d3\"), require(\"d3-geo\"), require(\"d3-queue\"));\n\n\nclass MapVisualiser extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mapData: {},\n            delta: []\n        }\n    }\n    componentDidMount() {\n        const { mapData } = this.props;\n        this.initMap(mapData);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.mapData !== nextProps.mapData) {\n            this.setState({ mapData: nextProps.mapData })\n            this.initMap(nextProps.mapData);\n        }\n        if (this.state.delta !== nextProps.delta) {\n            this.setState({ delta: nextProps.delta });\n            requestAnimationFrame(() => this.highlightChangedStates(nextProps.delta));\n        }\n    }\n\n\n    highlightChangedStates(delta) {\n        let data = [...delta];\n        const animate = (state,color, dur=15000) =>{\n            const id = `#st_${state.state.split(\" \").join(\"_\")}`;\n            const filledColor =  d3.select(id).style('fill');\n            d3.select(`#st_${state.state.split(\" \").join(\"_\")}`)\n            .style('fill', color)\n            .style('opacity', 0.7)\n            .style('stroke-width', '2')\n            .transition()\n            .duration(dur)\n            .style('fill', filledColor)\n            .style('opacity', 1)\n            .style('stroke-width', '1');\n        }\n        data.forEach((state) => {\n\n            if (state.isDead > 0) {\n                animate(state,'#d62525' );\n\n            } else if (state.isConfirmed > 0) {\n                    animate(state,'#ffc107');\n\n            } else if (state.isRecovered > 0) {\n                    animate(state,'#20c997')\n            }\n        })\n    }\n\n    initMap(data) {\n        if (!Object.keys(data).length) return;\n        let topoMap = data;\n        // let states = topojson.feature(topoMap, topoMap.objects.ne_10m_admin_1_India_Official);\n        let states = topojson.feature(topoMap, topoMap.objects.india);\n\n        // Map render\n        let mapContainerWidth = document.getElementById('map').clientWidth - 20,\n            scaleValue = document.body.clientWidth < 500 ? 600 : 800;\n        let map = this.stateMap(states.features).width(mapContainerWidth).height(500).scale(scaleValue);\n        d3.select(\"#map\").call(map);\n    }\n\n    stateMap(states) {\n\n        var width = 800, height = 700, scale = 160;\n        //var colors = [\"#ffffff\", \"#bcbddc\", \"#9e9ac8\", \"#807dba\", \"#6a51a3\"];\n        var colors = [\"#fff\", \"#E6E7DE\", \"#CDD0BE\", \"#B4B89D\", \"#9CA17D\"]\n        let that = this;\n        function render(selection) {\n            selection.each(function () {\n\n                var color = d3.scaleLinear()\n                    .domain([d3.min(states, function (d) { return d.properties.confirmed; }), d3.max(states, function (d) { return d.properties.confirmed; })])\n                    .range(colors);\n                d3.select(this).select(\"svg\").remove();\n                var svg = d3.select(this).append(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height);\n\n                var projection = d3.geoMercator()\n                    .center([83, 23])\n                    .scale(scale)\n                    .translate([width / 2, height / 2]);\n\n                var path = d3.geoPath().projection(projection);\n                var selectState = svg.selectAll(\"g\").data(states).enter().append(\"g\").attr(\"class\", \"state\");\n                // var div = d3.select(\"body\").append(\"div\")\n                //     .attr(\"class\", \"tooltip\")\n                //     .style(\"opacity\", 0);\n\n\n                // prepares states and it's boudaries\n                selectState.append(\"path\")\n                    .style(\"fill\", function (d) {\n                        return color(d.properties.confirmed)\n                    })\n                    .attr(\"d\", path)\n                    .attr(\"id\", (data) => { return data.properties.id })\n                    .on(\"mouseover\", (d) => {\n                        d3.select('#' + d.properties.id).style('stroke', '#5C603E').style('stroke-width', '2');\n                        that.setTooltip({\n                            ...d.properties,\n                            style: { left: window.event.pageX, top: window.event.pageY - 50, opacity: 1 }\n                        });\n                    })\n                    .on(\"mouseout\", function (d) {\n                        d3.select('#' + d.properties.id).style('stroke', '#000').style('stroke-width', '1');\n                        that.setTooltip({\n                            ...d.properties,\n                            style: { left: window.event.pageX, top: window.event.pageY - 28, opacity: 0 }\n                        });\n                    });\n\n                // svg.selectAll(\"text\").data(states).enter().append(\"text\")\n                //     .attr(\"class\", function (d) { return \"label \" + d.id; })\n                //     .attr(\"transform\", function (d) { return \"translate(\" + path.centroid(d) + \")\"; })\n                //     .attr(\"dy\", \".35em\")\n                //     .text(function (d) { return d.properties.name; });\n            });\n        } // render\n        render.height = function (value) {\n            if (!arguments.length) return height;\n            height = value;\n            return render;\n        };\n        render.width = function (value) {\n            if (!arguments.length) return width;\n            width = value;\n            return render;\n        };\n        render.scale = function (value) {\n            if (!arguments.length) return scale;\n            scale = value;\n            return render;\n        };\n\n        return render;\n    }\n\n    setTooltip(tooltipData) {\n        this.props.setTooltip(tooltipData);\n    }\n    render() {\n        return (\n            <div id=\"map\" className=\"fadeInUp\"></div>\n        );\n    }\n\n}\n\nexport default MapVisualiser;","import React from 'react';\n\nconst Tooltip = (props) => {\n    if(!Object.keys(props).length) return (<></>);\n    return (\n        <div style={{ left: props.style.left + 'px', top: props.style.top + 'px', opacity: props.style.opacity }} className=\"tooltip\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Tooltip;","const parseMapData = (mapData, covidData) => {\n    let geometries = mapData.objects.india.geometries;\n    geometries = geometries.map((data, i) => {\n        let stateData = getStateByName(covidData, data.properties.ST_NM);\n        if (stateData) {\n            return { ...data, properties: { ...data.properties, ...stateData, id: `st_${data.properties.ST_NM.split(\" \").join(\"_\")}` } };\n        }\n        return data;\n    });\n    mapData.objects.india.geometries = geometries;\n    return mapData;\n}\n\nconst getStateByName = (covidData, state) => {\n    for (let i in covidData) {\n        if (covidData[i].state == state) return covidData[i];\n    }\n    return null;\n}\n\nexport { parseMapData, getStateByName };","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nconst CovidTable = props => {\n    const {covidData} = props;\n  const createRows = covidData => {\n    return covidData.map((data,i) => {\n      const { state, confirmed, deaths, recovered } = data;\n      return (\n        <tr key={i}>\n          <td>{state}</td>\n          <td>{confirmed}</td>\n          <td>{deaths}</td>\n          <td>{recovered}</td>\n        </tr>\n      );\n    });\n  };\n  return (\n    <Table striped bordered hover responsive variant=\"dark\">\n      <thead>\n        <tr>\n          <th>State</th>\n          <th>Confirmed</th>\n          <th>Deaths</th>\n          <th>Recovered</th>\n        </tr>\n      </thead>\n      <tbody>\n       {createRows(covidData)}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default CovidTable;\n","import React, { useState, useEffect } from 'react';\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from 'react-bootstrap/Tabs'\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport CovidTable from \"./CovidTable\";\nimport axios from \"axios\";\n\nconst TabularInfo = props => {\n    const {covidData} = props;\n    const [tabularData,setTabularData] = useState([]);\n    console.log(covidData, tabularData);\n    useEffect(()=>{\n        setTabularData(covidData);\n    },[covidData]);\n\n  const loadData = eventKey => {\n    // console.log(eventKey);\n    if(eventKey === '1'){\n        setTabularData(covidData);\n    }else if(eventKey === '2'){\n        axios.get(\"http://localhost:3000/covid-data/today\").then(resp => {\n            let covidData = resp.data;\n            setTabularData(covidData);\n          });\n    }\n  };\n\n  return (\n    <Container className=\"covid-stats-table-container\" fluid>\n      <Row>\n        <Col>\n          <Tabs id=\"uncontrolled-tab-example\" onSelect={loadData}>\n            <Tab eventKey=\"1\" className=\"covid-table-tabs\" title=\"Total Cases\">\n            </Tab>\n            <Tab eventKey=\"2\" className=\"covid-table-tabs\" title=\"Today's Cases\">\n            </Tab>\n          </Tabs>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {tabularData.length>0 && <CovidTable covidData={tabularData}></CovidTable>}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default TabularInfo;\n","const notifyCovidUpdates = (data) => {\n    let covidDelta = [...data];\n    covidDelta.shift();\n    let notificationBody = covidDelta.map((data) => {\n        return `${data.state}: ${data.isDead} new deaths , ${data.isRecovered} new recoveries, ${data.isConfirmed} new confirmed cases`;\n    })\n    notificationBody = notificationBody.join('\\n\\n');\n    console.log(data);\n    notifyMe(notificationBody);\n}\n\nfunction notifyMe(text, audioPath) {\n\n    var options = {\n        body: text,\n        icon: './logo192.png'\n    };\n    if (!(\"Notification\" in window)) {\n        alert(\"This browser does not support desktop notification\");\n    }\n    else if (Notification.permission === \"granted\") {\n        var notification = new Notification(\"COVID-19 Updates\", options);\n    }\n    else if (Notification.permission !== \"denied\") {\n        Notification.requestPermission(function (permission) {\n            if (permission === \"granted\") {\n                var notification = new Notification(\"Updates! \", options);\n            }\n        });\n    }\n}\nexport { notifyCovidUpdates };","import React from \"react\";\nimport MapVisualiser from \"./MapVisualiser\";\nimport Tooltip from \"./Tooltip\";\nimport axios from \"axios\";\nimport mapData from \"./../assets/india.json\";\nimport { parseMapData } from \"../utils/Dataparser\";\n\nimport TabularInfo from './TabularInfo';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Navbar from 'react-bootstrap/Navbar';\nimport {notifyCovidUpdates} from '../utils/Notifier';\nclass MapVisualiserContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      mapData: {},\n      covidData: [],\n      delta: []\n    };\n  }\n\n  componentDidMount() {\n    const getCOVIDData = (isDelta = false, delta = null) => {\n      axios.get(\"http://localhost:3000/covid-data\").then(resp => {\n        let covidData = resp.data;\n        this.setState({\n          covidData,\n          mapData: { ...parseMapData(mapData, covidData) }\n        });\n        if (isDelta) {\n          this.setState({ delta });\n          notifyCovidUpdates(delta);\n        }\n      });\n    };\n    const getCOVIDDelta = () => {\n\n       let delta = [\n            {\n              \"state\": \"Odisha\",\n              \"isDead\": 90,\n              \"isRecovered\": 30,\n              \"isConfirmed\": 70\n            },\n            {\n              \"state\": \"Maharashtra\",\n              \"isDead\": 0,\n              \"isRecovered\": 70,\n              \"isConfirmed\": 0\n            },\n            {\n              \"state\": \"Uttar Pradesh\",\n              \"isDead\": 0,\n              \"isRecovered\": 30,\n              \"isConfirmed\": 800\n            }\n          ];\n  \n          if (delta.length > 0) {\n            getCOVIDData(true, delta)\n          }\n\n\n\n\n    //   axios.get(\"http://localhost:3000/covid-data/delta\").then(resp => {\n    //     let delta = resp.data;\n\n    //     delta = [\n    //       {\n    //         \"state\": \"Keral\",\n    //         \"isDead\": 0,\n    //         \"isRecovered\": 30,\n    //         \"isConfirmed\": 0\n    //       },\n    //       {\n    //         \"state\": \"Maharashtra\",\n    //         \"isDead\": 70,\n    //         \"isRecovered\": 0,\n    //         \"isConfirmed\": 0\n    //       },\n    //       {\n    //         \"state\": \"Uttar Pradesh\",\n    //         \"isDead\": 0,\n    //         \"isRecovered\": 30,\n    //         \"isConfirmed\": 700\n    //       }\n    //     ];\n\n    //     if (delta.length > 0) {\n    //       getCOVIDData(true, delta)\n    //     }\n    //   });\n    }\n    getCOVIDData();\n    //polling on updates\n    // setInterval(() => {\n    //   getCOVIDDelta();\n    // }, 4*3600000);\n\n    setInterval(() => {\n        getCOVIDDelta();\n      }, 20000);\n  }\n\n  prepareTooltipBody(tooltipData) {\n    const { state, confirmed, deaths, recovered } = tooltipData;\n    return (\n      <>\n        <span><strong>{tooltipData.state}</strong></span>\n        <p>active: {confirmed - deaths - recovered}</p>\n        {/* <p>deaths: {deaths}</p>\n                <p>recovered: {recovered}</p> */}\n      </>\n    );\n  }\n  setTooltip = tooltipData => {\n    this.setState({ tooltipData });\n  };\n\n  prepareTooltipBody(tooltipData) {\n    return (\n      <>\n        <h6>\n          <strong>{tooltipData.state}</strong>\n        </h6>\n        <p>confirmed: {tooltipData.confirmed}</p>\n        <p>deaths: {tooltipData.deaths}</p>\n        <p>recovered: {tooltipData.recovered}</p>\n      </>\n    );\n  }\n\n  render() {\n    const { mapData, tooltipData, delta } = this.state;\n    return (\n      <>\n\n        <Container fluid>\n          <Navbar bg=\"light\" variant=\"light\" ><h5 style={{fontFamily: 'fantasy'}}>COVID-19 Alarm System</h5></Navbar>\n          <Row>\n            <Col>\n              <MapVisualiser delta={delta} setTooltip={this.setTooltip} mapData={mapData} />\n              {tooltipData && (\n                <Tooltip style={tooltipData.style}>\n                  {this.prepareTooltipBody(tooltipData)}\n                </Tooltip>\n              )}\n            </Col>\n            <Col>\n              <TabularInfo covidData={this.state.covidData} />\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default MapVisualiserContainer;\n","import React from 'react';\nimport MapVisualiserContainer from './components/MapVisualiserContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <MapVisualiserContainer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}