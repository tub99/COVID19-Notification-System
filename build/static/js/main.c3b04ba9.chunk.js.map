{"version":3,"sources":["components/MapVisualiser.js","utils/Dataparser.js","components/CovidTable.js","components/TabularInfo.js","components/InfoUpdate.js","utils/Notifier.js","components/MapVisualiserContainer.js","App.js","serviceWorker.js","index.js"],"names":["d3","Object","assign","require","React","Component","parseMapData","mapData","covidData","geometries","objects","india","map","data","i","stateData","getStateByName","properties","ST_NM","id","split","join","state","CovidTable","props","Table","size","striped","bordered","hover","responsive","variant","confirmed","deaths","recovered","key","createRows","TabularInfo","useState","tabularData","setTabularData","console","log","useEffect","Container","className","fluid","Row","Col","Tabs","onSelect","eventKey","axios","get","then","resp","Tab","title","length","InfoUpdate","info","ListGroup","Item","currentdate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getCurrentDT","isConfirmed","isDead","isRecovered","infoMessage","createList","notifyCovidUpdates","covidDelta","shift","notificationBody","text","audioPath","options","body","icon","window","Notification","permission","requestPermission","alert","notifyMe","MapVisualiserContainer","setTooltip","tooltipData","setState","delta","getCOVIDData","isDelta","this","Navbar","bg","style","fontFamily","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3b04ba9.chunk.js","sourcesContent":["import React from 'react';\nimport * as topojson from \"topojson-client\";\n// import data from './../assets/ne_10m_admin_1_India_Official.json';\nimport data from './../assets/india.json';\nvar d3 = Object.assign({}, require(\"d3\"), require(\"d3-geo\"), require(\"d3-queue\"));\n\n\nclass MapVisualiser extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mapData: {},\n            delta: []\n        }\n    }\n    componentDidMount() {\n        const { mapData } = this.props;\n        this.initMap(mapData);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.mapData !== nextProps.mapData) {\n            this.setState({ mapData: nextProps.mapData })\n            this.initMap(nextProps.mapData);\n        }\n        if (this.state.delta !== nextProps.delta) {\n            this.setState({ delta: nextProps.delta });\n            requestAnimationFrame(() => this.highlightChangedStates(nextProps.delta));\n        }\n    }\n\n\n    highlightChangedStates(delta) {\n        let data = [...delta];\n        data.shift();\n        const animate = (state,color, dur=1500000) =>{\n            const id = `#st_${state.state.split(\" \").join(\"_\")}`;\n            const filledColor =  d3.select(id).style('fill');\n            d3.select(`#st_${state.state.split(\" \").join(\"_\")}`)\n            .style('fill', color)\n            .style('opacity', 0.7)\n            .style('stroke-width', '2')\n            .transition()\n            .duration(dur)\n            .style('fill', filledColor)\n            .style('opacity', 1)\n            .style('stroke-width', '1');\n        }\n        data.forEach((state) => {\n\n            if (state.isDead > 0) {\n                animate(state,'#d62525' );\n\n            } else if (state.isConfirmed > 0) {\n                    animate(state,'#ffc107');\n\n            } else if (state.isRecovered > 0) {\n                    animate(state,'#20c997')\n            }\n        })\n    }\n\n    initMap(data) {\n        if (!Object.keys(data).length) return;\n        let topoMap = data;\n        // let states = topojson.feature(topoMap, topoMap.objects.ne_10m_admin_1_India_Official);\n        let states = topojson.feature(topoMap, topoMap.objects.india);\n\n        // Map render\n        let mapContainerWidth = document.getElementById('map').clientWidth - 20,\n            scaleValue = document.body.clientWidth < 500 ? 600 : 800;\n        let map = this.stateMap(states.features).width(mapContainerWidth).height(500).scale(scaleValue);\n        d3.select(\"#map\").call(map);\n    }\n\n    stateMap(states) {\n\n        var width = 800, height = 700, scale = 160;\n        //var colors = [\"#ffffff\", \"#bcbddc\", \"#9e9ac8\", \"#807dba\", \"#6a51a3\"];\n        var colors = [\"#fff\", \"#E6E7DE\", \"#CDD0BE\", \"#B4B89D\", \"#9CA17D\"]\n        let that = this;\n        function render(selection) {\n            selection.each(function () {\n\n                var color = d3.scaleLinear()\n                    .domain([d3.min(states, function (d) { return d.properties.confirmed; }), d3.max(states, function (d) { return d.properties.confirmed; })])\n                    .range(colors);\n                d3.select(this).select(\"svg\").remove();\n                var svg = d3.select(this).append(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height);\n\n                var projection = d3.geoMercator()\n                    .center([83, 23])\n                    .scale(scale)\n                    .translate([width / 2, height / 2]);\n\n                var path = d3.geoPath().projection(projection);\n                var selectState = svg.selectAll(\"g\").data(states).enter().append(\"g\").attr(\"class\", \"state\");\n                // var div = d3.select(\"body\").append(\"div\")\n                //     .attr(\"class\", \"tooltip\")\n                //     .style(\"opacity\", 0);\n\n\n                // prepares states and it's boudaries\n                selectState.append(\"path\")\n                    .style(\"fill\", function (d) {\n                        return color(d.properties.confirmed)\n                    })\n                    .attr(\"d\", path)\n                    .attr(\"id\", (data) => { return data.properties.id })\n                    .on(\"mouseover\", (d) => {\n                        d3.select('#' + d.properties.id).style('stroke', '#5C603E').style('stroke-width', '2');\n                        that.setTooltip({\n                            ...d.properties,\n                            style: { left: window.event.pageX, top: window.event.pageY - 50, opacity: 1 }\n                        });\n                    })\n                    .on(\"mouseout\", function (d) {\n                        d3.select('#' + d.properties.id).style('stroke', '#000').style('stroke-width', '1');\n                        that.setTooltip({\n                            ...d.properties,\n                            style: { left: window.event.pageX, top: window.event.pageY - 28, opacity: 0 }\n                        });\n                    });\n\n                // svg.selectAll(\"text\").data(states).enter().append(\"text\")\n                //     .attr(\"class\", function (d) { return \"label \" + d.id; })\n                //     .attr(\"transform\", function (d) { return \"translate(\" + path.centroid(d) + \")\"; })\n                //     .attr(\"dy\", \".35em\")\n                //     .text(function (d) { return d.properties.name; });\n            });\n        } // render\n        render.height = function (value) {\n            if (!arguments.length) return height;\n            height = value;\n            return render;\n        };\n        render.width = function (value) {\n            if (!arguments.length) return width;\n            width = value;\n            return render;\n        };\n        render.scale = function (value) {\n            if (!arguments.length) return scale;\n            scale = value;\n            return render;\n        };\n\n        return render;\n    }\n\n    setTooltip(tooltipData) {\n        this.props.setTooltip(tooltipData);\n    }\n    render() {\n        return (\n            <div id=\"map\" className=\"fadeInUp\"></div>\n        );\n    }\n\n}\n\nexport default MapVisualiser;","const parseMapData = (mapData, covidData) => {\n    let geometries = mapData.objects.india.geometries;\n    geometries = geometries.map((data, i) => {\n        let stateData = getStateByName(covidData, data.properties.ST_NM);\n        if (stateData) {\n            return { ...data, properties: { ...data.properties, ...stateData, id: `st_${data.properties.ST_NM.split(\" \").join(\"_\")}` } };\n        }\n        return data;\n    });\n    mapData.objects.india.geometries = geometries;\n    return mapData;\n}\n\nconst getStateByName = (covidData, state) => {\n    for (let i in covidData) {\n        if (covidData[i].state == state) return covidData[i];\n    }\n    return null;\n}\n\nexport { parseMapData, getStateByName };","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nconst CovidTable = props => {\n    const {covidData} = props;\n  const createRows = covidData => {\n    return covidData.map((data,i) => {\n      const { state, confirmed, deaths, recovered } = data;\n      return (\n        <tr key={i}>\n          <td>{state}</td>\n          <td>{confirmed}</td>\n          <td>{deaths}</td>\n          <td>{recovered}</td>\n        </tr>\n      );\n    });\n  };\n  return (\n    <Table size=\"sm\" striped bordered hover responsive variant=\"dark\">\n      <thead>\n        <tr>\n          <th>State</th>\n          <th>Confirmed</th>\n          <th>Deaths</th>\n          <th>Rec</th>\n        </tr>\n      </thead>\n      <tbody>\n       {createRows(covidData)}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default CovidTable;\n","import React, { useState, useEffect } from 'react';\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from 'react-bootstrap/Tabs'\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport CovidTable from \"./CovidTable\";\nimport axios from \"axios\";\n\nconst TabularInfo = props => {\n  const BASE_URL = \"http://localhost:3030\";\n    const {covidData} = props;\n    const [tabularData,setTabularData] = useState([]);\n    console.log(covidData, tabularData);\n    useEffect(()=>{\n        setTabularData(covidData);\n    },[covidData]);\n\n  const loadData = eventKey => {\n    // console.log(eventKey);\n    if(eventKey === '1'){\n        setTabularData(covidData);\n    }else if(eventKey === '2'){\n        axios.get(\"/covid-data/today\").then(resp => {\n            let covidData = resp.data;\n            setTabularData(covidData);\n          });\n    }\n  };\n\n  return (\n    <Container className=\"covid-stats-table-container\" fluid>\n      <Row>\n        <Col>\n          <Tabs id=\"uncontrolled-tab-example\" onSelect={loadData}>\n            <Tab eventKey=\"1\" className=\"covid-table-tabs\" title=\"Total Cases\">\n            </Tab>\n            {/* <Tab eventKey=\"2\" className=\"covid-table-tabs\" title=\"Today's Cases\">\n            </Tab> */}\n          </Tabs>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {tabularData.length>0 && <CovidTable covidData={tabularData}></CovidTable>}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default TabularInfo;\n","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst InfoUpdate = props => {\n  const { info } = props;\n  const getCurrentDT = () => {\n    var currentdate = new Date();\n    var datetime =\n      \"Last Sync: \" +\n      currentdate.getDate() +\n      \"/\" +\n      (currentdate.getMonth() + 1) +\n      \"/\" +\n      currentdate.getFullYear() +\n      \" @ \" +\n      currentdate.getHours() +\n      \":\" +\n      currentdate.getMinutes() +\n      \":\" +\n      currentdate.getSeconds();\n\n    return datetime;\n  };\n\n  const createList = info => {\n    return info.map(data => {\n      const { state, isConfirmed, isDead, isRecovered } = data;\n      let infoMessage = `${state} : `;\n      if (isDead > 0) infoMessage += `${isDead} new dead. `;\n      if (isConfirmed > 0) infoMessage += `${isConfirmed} new confirmed. `;\n      if (isRecovered > 0) infoMessage += `${isRecovered} new recovered.`;\n      return <ListGroup.Item variant=\"dark\">{infoMessage}</ListGroup.Item>;\n    });\n  };\n\n  return (\n    <Container className=\"info-updtaes\" fluid>\n      <ListGroup variant=\"dark\">\n       { (info && info.length>0) && <ListGroup.Item className=\"info-updtaes dark-theme\" variant=\"dark\">\n          {getCurrentDT()}\n        </ListGroup.Item>\n        }\n        {createList(info)}\n      </ListGroup>\n    </Container>\n  );\n};\n\nexport default InfoUpdate;\n","const notifyCovidUpdates = (data) => {\n    let covidDelta = [...data];\n    covidDelta.shift();\n    let notificationBody = covidDelta.map((data) => {\n        return `${data.state}: ${data.isDead} new deaths , ${data.isRecovered} new recoveries, ${data.isConfirmed} new confirmed cases`;\n    })\n    notificationBody = notificationBody.join('\\n\\n');\n    console.log(data);\n    notifyMe(notificationBody);\n}\n\nfunction notifyMe(text, audioPath) {\n\n    var options = {\n        body: text,\n        icon: './logo192.png'\n    };\n    if (!(\"Notification\" in window)) {\n        alert(\"This browser does not support desktop notification\");\n    }\n    else if (Notification.permission === \"granted\") {\n        var notification = new Notification(\"COVID-19 Updates\", options);\n    }\n    else if (Notification.permission !== \"denied\") {\n        Notification.requestPermission(function (permission) {\n            if (permission === \"granted\") {\n                var notification = new Notification(\"Updates! \", options);\n            }\n        });\n    }\n}\nexport { notifyCovidUpdates };","import React from \"react\";\nimport MapVisualiser from \"./MapVisualiser\";\nimport Tooltip from \"./Tooltip\";\nimport axios from \"axios\";\nimport mapData from \"./../assets/india.json\";\nimport { parseMapData } from \"../utils/Dataparser\";\n\nimport TabularInfo from \"./TabularInfo\";\nimport InfoUpdate from \"./InfoUpdate\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { notifyCovidUpdates } from \"../utils/Notifier\";\nclass MapVisualiserContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      mapData: {},\n      covidData: [],\n      delta: []\n    };\n  }\n\n  componentDidMount() {\n    const BASE_URL = \"http://localhost:3030\";\n    const getCOVIDData = (isDelta = false, delta = null) => {\n      axios.get(\"/covid-data\").then(resp => {\n        let covidData = resp.data;\n        this.setState({\n          covidData,\n          mapData: { ...parseMapData(mapData, covidData) }\n        });\n        if (isDelta) {\n          this.setState({ delta });\n          notifyCovidUpdates(delta);\n        }\n      });\n    };\n    const getCOVIDDelta = () => {\n      axios.get(\"/covid-data/delta\").then(resp => {\n        let delta = resp.data;\n        if (delta.length > 0) {\n          getCOVIDData(true, delta);\n        }\n      });\n    };\n    getCOVIDData();\n    //polling on updates\n    // const deltaPollDuration = 1800000;\n    // setInterval(() => {\n    //   getCOVIDDelta();\n    // }, deltaPollDuration);\n  }\n\n  prepareTooltipBody(tooltipData) {\n    const { state, confirmed, deaths, recovered } = tooltipData;\n    return (\n      <>\n        <span>\n          <strong>{tooltipData.state}</strong>\n        </span>\n        <p>active: {confirmed - deaths - recovered}</p>\n        {/* <p>deaths: {deaths}</p>\n                <p>recovered: {recovered}</p> */}\n      </>\n    );\n  }\n  setTooltip = tooltipData => {\n    this.setState({ tooltipData });\n  };\n\n  prepareTooltipBody(tooltipData) {\n    return (\n      <>\n        <h6>\n          <strong>{tooltipData.state}</strong>\n        </h6>\n        <p>confirmed: {tooltipData.confirmed}</p>\n        <p>deaths: {tooltipData.deaths}</p>\n        <p>recovered: {tooltipData.recovered}</p>\n      </>\n    );\n  }\n\n  render() {\n    const { mapData, tooltipData, delta } = this.state;\n    return (\n      <>\n        <Container fluid>\n          <Navbar bg=\"light\" variant=\"light\">\n            <h5 style={{ fontFamily: \"fantasy\" }}>COVID-19 Alarm System</h5>\n          </Navbar>\n          <Row>\n            {/* <Col>\n              <MapVisualiser\n                delta={delta}\n                setTooltip={this.setTooltip}\n                mapData={mapData}\n              />\n              {tooltipData && (\n                <Tooltip style={tooltipData.style}>\n                  {this.prepareTooltipBody(tooltipData)}\n                </Tooltip>\n              )}\n            </Col> */}\n            <Col>\n              <TabularInfo covidData={this.state.covidData} />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <InfoUpdate info={this.state.delta}></InfoUpdate>\n            </Col>\n            <Col></Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default MapVisualiserContainer;\n","import React from 'react';\nimport MapVisualiserContainer from './components/MapVisualiserContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <MapVisualiserContainer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}